---
# yamllint disable rule:colons
# clog Jumbo "clog.core.config"  --font straight
#   _____           _   _          __        __
#  |  ___|   ___   | | | |  _   _  \ \      / /
#  | |_     / _ \  | |_| | | | | |  \ \ /\ / /
#  |  _|   | (_) | |  _  | | |_| |   \ V  V /
#  |_|      \___/  |_| |_|  \__,_|    \_/\_/
# =============================================================================
#               _                       _
#   ___  _ _   (_)  _ __   _ __   ___  | |_   ___
#  (_-< | ' \  | | | '_ \ | '_ \ / -_) |  _| (_-<
#  /__/ |_||_| |_| | .__/ | .__/ \___|  \__| /__/
#                  |_|    |_|
# -----------------------------------------------------------------------------
snippets:
  build: |
    eval "$(clog Source project config)"    # configure project - local config
    eval "$(clog Inc)"                      # shell embedded help (sh, zsh & bash)
    help="core/sh/help-golang.sh"           # build embedded help
    eval "$(clog Cat $help)"                # golang build helpers

    clog Log -I "Build$cC $PROJECT $cT using clog's$cF $help"

    clog Check pre-build #&& [ $? -gt 0 ] && exit 1
    clog Check build     && [ $? -gt 0 ] && exit 1
    # ------------------------------------------------------------------------------
    app=podserver  # our pod server app command
    export MAKE="hugo $app ko"

    # ensure tmp dir exists
    mkdir -p tmp

    if (clog Should MAKE "hugo"); then
      [ ! -d content ] && ln -s documentation/content content
      clog Log -I "Purging kodata/ and building site"
      rm -rf kodata/*
      [ $? -gt 0 ] && fWarn "purging kodata/ - failed - continuing anyway"
      hugo build --minify --forceSyncStatic --logLevel warn
      [ -d content ] && rm content
    fi

    if (clog Should MAKE "$app"); then
      fGoBuild tmp/$app-amd-lnx     linux   amd64
      fGoBuild tmp/$app-arm-lnx     linux   arm64
      fGoBuild tmp/$app-arm-mac     darwin  arm64
      clog Log -I "stand-alone exe built to the$cF tmp/$cT folder\n"
    fi

    if (clog Should MAKE "ko"); then
      tag="$(clog git tag ref)"
      # config is in .ko.yaml
      # use the default docker repo unless told otherwise
      [ -z "$DOCKER_NS" ] && DOCKER_NS="mrmxf"
      [ -z "$KO_DOCKER_REPO" ] && KO_DOCKER_REPO="$DOCKER_NS"
      export KO_DOCKER_REPO
      export KO_CONFIG_PATH=".ko.yaml"
      export KO_DATA_DATE_EPOCH=$(git log -1 --format='%ct')
      ko build --base-import-paths --tags "$tag" --tags "latest" .
      
      clog Log -I "multi-arch docker build$cF $PROJECT$cT:$cW$tag$cT and ${cW}latest"
    fi

  is-prod-release: |
    [ "prod" == "$(yq -r '.[0].build'  assets/data/releases.yaml)" ]
  git:
    tag:
      # fohuw, like Hugo & golang requires a "v"
      ref: echo "v$(yq -r '.[0].version'  assets/data/releases.yaml)"
    message:
      ref:  yq -r '.[0].note'  assets/data/releases.yaml
  project:
    config: |
      export PROJECT=fohuw
      export DOCKER_NS=mrmxf
    has:
      fomantic: yq -r '.cdn[]|select(.name=="fomantic-ui css").version' config/_default/params.yaml
      hugo: hugo version|grep -oE '[0-9]\.[0-9]+\.[0-9]+'
      git-lfs: git-lfs version|grep -oE '[0-9]\.[0-9]+\.[0-9]+'|head -1
    needs:
      fomantic: curl -s "https://api.github.com/repos/fomantic/Fomantic-UI/tags" | jq -r '.[0].name'
      hugo: |
        j="$(curl -sL https://api.github.com/repos/gohugoio/hugo/releases/latest)"
        echo "$(   echo $j | jq -r '.name   | ltrimstr("v")')"
      git-lfs: echo "3.6.0"
  watch: |
    [ ! -d content ] && ln -s documentation/content content
    hugo server --port=1313 --buildDrafts --buildFuture --buildExpired --cleanDestinationDir
    rm content
# =============================================================================
#    ___   _                 _
#   / __| | |_    ___   __  | |__
#  | (__  | ' \  / -_) / _| | / /
#   \___| |_||_| \___| \__| |_\_\
# -----------------------------------------------------------------------------
check:
  build:
    blocks:
      - name: fomantic version
        try: |
          [[ "$(clog project needs fomantic)" == "$(clog project has fomantic)" ]]
        ok: clog Log -I "fomantic ($(clog project has fomantic)) is up to date in header files"
        catch: |
          clog Log -W "fomantic: bad version. Need ($(clog project needs fomantic)) got ($(clog project has fomantic))"
      - name: hugo version
        try: |
          [[ "$(clog project needs hugo)" == "$(clog project has hugo)" ]]
        ok: clog Log -I "hugo $(clog project has hugo) is up to date"
        catch: |
          clog Log -W "hugo: bad version. Need $(clog project needs hugo), got $(clog project has hugo)"
      - name: content folder
        try: '[ -d "documentation/content/" ]'
        ok: clog Log -I "documentation/content folder OK"
        catch: eval "$(clog Inc)";clog Log -E "documentation/content folder missing"
